" ln -s /app/script/conf/vimrc /home/centos/.vimrc
" ln -s /Users/mk/code/git/build_dev_env/vim/vimrc /Users/mk/.vimrc

set fencs=utf-8,gbk,utf-16,utf-32,ucs-bom
set nu
" windows clipboard sperate
set clipboard=

set colorcolumn=120 " limited to 120 characters per line
:highlight ColorColumn ctermbg=Red ctermfg=Yellow
:highlight VertSplit ctermbg=Yellow ctermfg=DarkYellow

" Set indent
set smartindent
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" Set Search
set hlsearch
set incsearch " Real-Time Search Highlighting

" Set completeopt
set dictionary+=~/code/git/build_dev_env/vim/vimword,~/code/git/build_dev_env/vim/vimwordphp
set complete+=k

" Set statusline
set laststatus=2
hi User1 ctermfg=white ctermbg=darkred cterm=bold
hi User2 ctermfg=white ctermbg=darkblue
hi User3 ctermfg=blue ctermbg=white

set statusline=
set statusline+=%1*  "switch to User1 highlight
set statusline+=\ %m%r\    "Modified? Readonly?
set statusline+=%2*  "switch to User2 highlight
set statusline+=\ %{strlen(&fenc)?&fenc:&enc}\ "encoding
set statusline+=%3*  "switch to User3 highlight
set statusline+=\ Buff:[%n]\  "buffer number
set statusline+=%2*  "switch to User2 highlight
set statusline+=\ Col:\ %c\            " Column
set statusline+=\ Row:\ %l/%L\        " Rownumber/total
set statusline+=%3*  "switch to User3 highlight
set statusline+=\ %P\   "percentage thru file
set statusline+=%2*  "switch to User2 highlight
set statusline+=%=      "left/right separator
set statusline+=\ %F\   "full filename
set statusline+=%*   "switch back to statusline highlight


" Rename tabs to show tab number.
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%4*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')
            let s .= '%#TabNum#'
            let s .= i
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= ' ' . file . ' '
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight link TabNum Special
endif

" why ? for vsp
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline cursorcolumn
  autocmd WinLeave * setlocal nocursorline nocursorcolumn
augroup END
highlight cursorcolumn cterm=reverse ctermbg=NONE ctermfg=GREEN
highlight cursorline cterm=underline ctermbg=NONE ctermfg=GREEN

" Disable syntax highlighting to improve performance
syntax on

iabbrev datetime. <C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>
iabbrev date. <C-R>=strftime("%Y-%m-%d")<CR>
" day of week
iabbrev dow. <C-R>=strftime("%A")<CR>

" Tigger when changed to insert Mode
autocmd InsertEnter * exec ":source ~/code/git/build_dev_env/vim/vimrc2"

:command Gpl !cd %:h;git pull

" Sync file to markbuild 
:command Mscp !~/Software/mscp %

" Uniq for vimword
:command Uniq %s/^\(.*\)\n\1$/\1/ 
command! Wd windo diffthis
command! Wo windo diffoff

" search current word
nnoremap ,n :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hlsearch<CR>

" open import
nnoremap ,O :execute "tabedit" expand("%:p:h") . "/" . expand("<cfile>:p")<CR>

nnoremap ,o :!open %<CR><CR>
nnoremap ,u :!open <cfile><CR><CR>
nnoremap ,r :source ~/.vimrc<CR>
nnoremap ,b :cd %:h<CR>:let cmd=":r!git blame -L ".line('.').",".line('.')." -el %:t"<CR>:execute cmd<CR>
nnoremap ,l :cd %:h<CR>:let cmd=":r!git log -L ".line('.').",".line('.').":%:t"<CR>:execute cmd<CR>
nnoremap ,p :set paste<CR>"+p:set nopaste<CR>
:map ,y "+y

" disable c-w-w
nnoremap <C-W><C-W> <Nop>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-z> <Nop> " stop C-z exit vim without save
